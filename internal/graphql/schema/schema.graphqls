# ==================================================
# SCHEMA OVERVIEW
# ==================================================

schema {
  query: Query
  mutation: Mutation
}

# ==================================================
# QUERY TYPE
# ==================================================
type Query {
  # User Queries
  getUsers(
    filter: UserFilter
    pagination: PaginationInput
    sort: UserSortInput
  ): UserPage!
  getUser(userID: ID!): User

  # Campaign Queries
  getCampaigns(
    filter: CampaignFilter
    pagination: PaginationInput
    sort: CampaignSortInput
  ): CampaignPage!
  getCampaign(campaignID: ID!): Campaign

  # Lead Queries
  getLeads(
    filter: LeadFilter
    pagination: PaginationInput
    sort: LeadSortInput
  ): LeadPage!
  getLead(leadID: ID!): Lead!

  # Organization Queries
  getOrganizations: [Organization!]!
  getOrganization(organizationID: ID!): Organization!

  # ResourceProfile Queries
  getResourceProfiles(
    filter: ResourceProfileFilter
    pagination: PaginationInput
    sort: ResourceProfileSortInput
  ): ResourceProfilePage!
  getResourceProfile(resourceProfileID: ID!): ResourceProfile

  # Vendor Queries
  getVendors(
    filter: VendorFilter
    pagination: PaginationInput
    sort: VendorSortInput
  ): VendorPage!
  getVendor(vendorID: ID!): Vendor

  # Task Queries
  getTasks(
    filter: TaskFilter
    pagination: PaginationInput
    sort: TaskSortInput
  ): TaskPage!
  getTask(taskID: ID!): Task!

  # CaseStudy Queries
  getCaseStudies(
    filter: caseStudyFilter
    pagination: PaginationInput
    sort: caseStudySortInput
  ): [caseStudy!]!
  getCaseStudy(caseStudyID: ID!): caseStudy
}

# ==================================================
# MUTATION TYPE
# ==================================================
type Mutation {
  # Authentication
  login(email: String!, password: String!): AuthPayload!

  # User Mutations
  createUser(input: CreateUserInput!): User!
  updateUser(userID: ID!, input: UpdateUserInput!): User!
  deleteUser(userID: ID!): User!

  # Organization Mutations
  createOrganization(input: CreateOrganizationInput!): Organization!

  # Campaign Mutations
  createCampaign(input: CreateCampaignInput!): Campaign!
  addUserToCampaign(userID: ID!, campaignID: ID!): Campaign!
  removeUserFromCampaign(userID: ID!, campaignID: ID!): Campaign!

  # Lead Mutations
  createLead(input: CreateLeadInput!): Lead!
  updateLead(leadID: ID!, input: UpdateLeadInput!): Lead!
  deleteLead(leadID: ID!): Lead!
  createLeadWithActivity(input: CreateLeadWithActivityInput!): Lead!

  # Deal Mutations
  createDeal(input: CreateDealInput!): Deal!

  # Activity Mutations
  createActivity(input: CreateActivityInput!): Activity!
  updateActivity(activityID: ID!, input: UpdateActivityInput!): Activity!
  deleteActivity(activityID: ID!): Activity!

  # ResourceProfile Mutations
  createResourceProfile(input: CreateResourceProfileInput!): ResourceProfile!
  updateResourceProfile(
    resourceProfileID: ID!
    input: UpdateResourceProfileInput!
  ): ResourceProfile!
  deleteResourceProfile(resourceProfileID: ID!): ResourceProfile!

  # Vendor Mutations
  createVendor(input: CreateVendorInput!): Vendor!
  updateVendor(vendorID: ID!, input: UpdateVendorInput!): Vendor!
  deleteVendor(vendorID: ID!): Vendor!

  # Task Mutations
  createTask(input: CreateTaskInput!): Task!
  updateTask(taskID: ID!, input: UpdateTaskInput!): Task!
  deleteTask(taskID: ID!): Task!

  # CaseStudy Mutations
  createCaseStudy(input: CreateCaseStudyInput!): caseStudy!
  updateCaseStudy(caseStudyID: ID!, input: UpdateCaseStudyInput!): caseStudy!
  deleteCaseStudy(caseStudyID: ID!): caseStudy!
}

# ==================================================
# USER TYPE AND RELATED INPUTS/ENUMS
# ==================================================
type User {
  userID: ID!
  googleId: String
  name: String!
  email: String!
  phone: String!
  role: String!
  password: String!
  campaigns: [Campaign!]!
}

input CreateUserInput {
  googleId: String
  name: String!
  email: String!
  phone: String
  password: String!
  role: UserRole!
}

input UpdateUserInput {
  name: String
  email: String
  phone: String
  role: UserRole
}

enum UserRole {
  ADMIN
  SALES_EXECUTIVE
  MANAGER
}

type AuthPayload {
  token: String!
  user: User!
}

# ==================================================
# CAMPAIGN TYPE AND RELATED INPUTS
# ==================================================
type Campaign {
  campaignID: ID!
  campaignName: String!
  campaignCountry: String!
  campaignRegion: String!
  industryTargeted: String!
  users: [User!]!
  leads: [Lead!]!
}

input CreateCampaignInput {
  campaignName: String!
  campaignCountry: String!
  campaignRegion: String!
  industryTargeted: String!
}

# ==================================================
# LEAD TYPE AND RELATED INPUTS/ENUMS
# ==================================================
enum LeadPriority {
  HIGH
  MEDIUM
  LOW
}

enum LeadStage {
  NEW
  IN_PROGRESS
  FOLLOW_UP
  CLOSED_WON
  CLOSED_LOST
}

type Lead {
  leadID: ID!
  firstName: String!
  lastName: String!
  email: String!
  linkedIn: String!
  country: String!
  phone: String!
  leadSource: String!
  initialContactDate: String!
  leadCreatedBy: User!
  leadAssignedTo: User!
  leadStage: String!
  leadNotes: String!
  leadPriority: String!
  organization: Organization!
  campaign: Campaign!
  activities: [Activity!]!
}

input CreateLeadInput {
  firstName: String!
  lastName: String!
  email: String!
  linkedIn: String!
  country: String!
  phone: String!
  leadSource: String!
  initialContactDate: String!
  leadAssignedTo: ID!
  leadStage: LeadStage!
  leadNotes: String!
  leadPriority: LeadPriority!
  organizationID: String!
  campaignID: String!
}

input UpdateLeadInput {
  firstName: String
  lastName: String
  email: String!
  linkedIn: String
  country: String
  phone: String
  leadSource: String!
  initialContactDate: String!
  leadAssignedTo: String!
  leadStage: LeadStage!
  leadNotes: String!
  leadPriority: LeadPriority!
  organizationID: String!
  campaignID: String!
}

input CreateLeadWithActivityInput {
  firstname: String!
  lastname: String!
  email: String!
  linkedIn: String!
  country: String!
  phone: String!
  leadSource: String!
  initialContactDate: String!
  leadAssignedTo: ID!
  leadStage: LeadStage!
  leadNotes: String!
  leadPriority: LeadPriority!
  organizationID: String!
  campaignID: String!
  activityType: String!
  dateTime: String!
  communicationChannel: String!
  contentNotes: String!
  participantDetails: String!
  followUpActions: String!
}

# ==================================================
# ORGANIZATION TYPE AND RELATED INPUTS
# ==================================================
type Organization {
  organizationID: ID!
  organizationName: String!
  organizationEmail: String!
  organizationWebsite: String
  city: String!
  country: String!
  noOfEmployees: String!
  annualRevenue: String!
  leads: [Lead!]!
}

input CreateOrganizationInput {
  organizationName: String!
  organizationEmail: String!
  organizationWebsite: String
  city: String!
  country: String!
  noOfEmployees: String!
  annualRevenue: String!
}

# ==================================================
# ACTIVITY TYPE AND RELATED INPUTS
# ==================================================
type Activity {
  activityID: ID!
  activityType: String!
  dateTime: String!
  communicationChannel: String!
  contentNotes: String!
  participantDetails: String!
  followUpActions: String!
  leadId: ID!
}

input CreateActivityInput {
  activityType: String!
  dateTime: String!
  communicationChannel: String!
  contentNotes: String!
  participantDetails: String!
  followUpActions: String!
  leadId: ID!
}

input UpdateActivityInput {
  activityType: String
  dateTime: String
  communicationChannel: String
  contentNotes: String
  participantDetails: String
  followUpActions: String
}

# ==================================================
# DEAL TYPE AND RELATED INPUTS/ENUMS
# ==================================================
type Deal {
  dealID: ID!
  dealName: String!
  leadID: ID!
  dealStartDate: String!
  dealEndDate: String!
  ProjectRequirements: String!
  dealAmount: String!
  dealStatus: String!
}

input CreateDealInput {
  dealName: String!
  leadID: ID!
  dealStartDate: String!
  dealEndDate: String!
  ProjectRequirements: String!
  dealAmount: String!
  dealStatus: dealStatus!
}

enum dealStatus {
  STARTED
  PENDING
  COMPLETED
}

# ==================================================
# TASK TYPE AND RELATED INPUTS/ENUMS
# ==================================================
enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

type Task {
  taskID: ID!
  user: User!
  title: String!
  description: String
  status: TaskStatus!
  priority: TaskPriority!
  dueDate: String!
}

input CreateTaskInput {
  title: String!
  description: String
  status: TaskStatus!
  priority: TaskPriority!
  dueDate: String!
}

input UpdateTaskInput {
  title: String
  description: String
  status: TaskStatus
  priority: TaskPriority
  dueDate: String
}

input TaskFilter {
  status: TaskStatus
  priority: TaskPriority
  userId: ID
  title: String
  dueDate: String
  search: String
}

type TaskPage {
  items: [Task]!
  totalCount: Int!
}

input TaskSortInput {
  field: TaskSortField!
  order: SortOrder!
}

enum TaskSortField {
  TITLE
  STATUS
  PRIORITY
  DUE_DATE
}

# ==================================================
# CASE STUDY TYPE AND RELATED INPUTS/ENUMS
# ==================================================
type caseStudy {
  caseStudyID: ID!
  projectName: String!
  clientName: String!
  techStack: String!
  projectDuration: String!
  keyOutcomes: String!
  industryTarget: String!
  tags: String!
  document: String!
}

input CreateCaseStudyInput {
  projectName: String!
  clientName: String!
  techStack: String!
  projectDuration: String!
  keyOutcomes: String!
  industryTarget: String!
  tags: String!
  document: String!
}

input UpdateCaseStudyInput {
  projectName: String!
  clientName: String!
  techStack: String!
  projectDuration: String!
  keyOutcomes: String!
  industryTarget: String!
  tags: String!
  document: String!
}

input caseStudyFilter {
  projectName: String
  clientName: String
  techStack: String
  industryTarget: String
  tags: String
  search: String
}

input caseStudySortInput {
  field: caseStudySortField!
  order: SortOrder!
}

enum caseStudySortField {
  createdAt
  updatedAt
  techStack
  industryTarget
}

# ==================================================
# RESOURCE PROFILE TYPE AND RELATED INPUTS/ENUMS
# ==================================================
enum ResourceType {
  CONSULTANT
  FREELANCER
  CONTRACTOR
  EMPLOYEE
}

enum ResourceStatus {
  ACTIVE
  INACTIVE
  ON_BENCH
}

type ResourceProfile {
  resourceProfileID: ID!
  type: ResourceType!
  firstName: String!
  lastName: String!
  totalExperience: Float!
  contactInformation: String!
  googleDriveLink: String
  status: ResourceStatus!
  vendorId: ID!
  vendor: Vendor
  resourceSkills: [ResourceSkill!]! # Use the new type
  pastProjects: [PastProject!]!
}

input CreateResourceProfileInput {
  type: ResourceType!
  firstName: String!
  lastName: String!
  totalExperience: Float!
  contactInformation: String!
  googleDriveLink: String
  status: ResourceStatus!
  vendorId: ID
  skillInputs: [ResourceSkillInput!]!
  pastProjectIds: [ID!]
}
input ResourceSkillInput {
  skillId: ID!
  experienceYears: Float!
}

input UpdateResourceProfileInput {
  type: ResourceType
  firstName: String
  lastName: String
  totalExperience: Float
  contactInformation: String
  googleDriveLink: String
  status: ResourceStatus
  vendorId: ID
  skillIDs: [ID!]
  pastProjectIds: [ID!]
}

# ==================================================
# VENDOR TYPE AND RELATED INPUTS/ENUMS
# ==================================================
enum VendorStatus {
  ACTIVE
  INACTIVE
  PREFERRED
}

enum PaymentTerms {
  NET_30
  NET_60
  NET_90
}

type Vendor {
  vendorID: ID!
  createdAt: String!
  updatedAt: String!
  companyName: String!
  status: VendorStatus!
  paymentTerms: PaymentTerms!
  address: String!
  gstOrVatDetails: String
  notes: String
  contactList: [Contact!]!
  skills: [Skill!]!
  performanceRatings: [PerformanceRating!]!
  resources: [ResourceProfile!]!
}

input CreateVendorInput {
  companyName: String!
  status: VendorStatus!
  paymentTerms: PaymentTerms!
  address: String!
  gstOrVatDetails: String
  notes: String
  skillIDs: [ID!]
}

input UpdateVendorInput {
  companyName: String
  status: VendorStatus
  paymentTerms: PaymentTerms
  address: String
  gstOrVatDetails: String
  notes: String
  skillIDs: [ID!]
}

# ==================================================
# SUPPORTING TYPES
# ==================================================
type ResourceSkill {
  skill: Skill!
  experienceYears: Float!
}

type Skill {
  skillID: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String
}

type PastProject {
  pastProjectID: ID!
  createdAt: String!
  updatedAt: String!
  resourceProfileId: ID!
  projectName: String!
  description: String
}

type Contact {
  contactID: ID!
  createdAt: String!
  updatedAt: String!
  vendorId: ID!
  name: String!
  email: String
  phoneNumber: String
}

type PerformanceRating {
  performanceRatingsID: ID!
  createdAt: String!
  updatedAt: String!
  vendorId: ID!
  rating: Int!
  review: String
}

# ==================================================
# COMMON INPUTS / PAGINATION / SORTING
# ==================================================
input UserFilter {
  name: String
  email: String
  role: UserRole
  search: String
}

input LeadFilter {
  name: String
  email: String
}

input CampaignFilter {
  campaignName: String
  campaignCountry: String
}

input ResourceProfileFilter {
  type: ResourceType
  firstName: String
  lastName: String
  totalExperienceMin: Float
  totalExperienceMax: Float
  status: ResourceStatus
  vendorId: ID
  skillIDs: [ID!]
  search: String
}

input VendorFilter {
  companyName: String
  status: VendorStatus
  paymentTerms: PaymentTerms
  search: String
  skillIDs: [ID!]
}

input PaginationInput {
  page: Int!
  pageSize: Int!
}

type UserPage {
  items: [User!]!
  totalCount: Int!
}

type CampaignPage {
  items: [Campaign!]!
  totalCount: Int!
}

type LeadPage {
  items: [Lead!]!
  totalCount: Int!
}

type ResourceProfilePage {
  items: [ResourceProfile!]!
  totalCount: Int!
}

type VendorPage {
  items: [Vendor!]!
  totalCount: Int!
}

enum SortOrder {
  ASC
  DESC
}

input UserSortInput {
  field: UserSortField!
  order: SortOrder!
}
enum UserSortField {
  createdAt
  name
  email
  role
}

input CampaignSortInput {
  field: CampaignSortField!
  order: SortOrder!
}
enum CampaignSortField {
  CAMPAIGN_NAME
  CREATED_AT
}

input LeadSortInput {
  field: LeadSortField!
  order: SortOrder!
}
enum LeadSortField {
  FIRST_NAME
  LAST_NAME
  EMAIL
  CREATED_AT
}

input ResourceProfileSortInput {
  field: ResourceProfileSortField!
  order: SortOrder!
}
enum ResourceProfileSortField {
  createdAt
  updatedAt
  firstName
  lastName
  totalExperience
  status
}

input VendorSortInput {
  field: VendorSortField!
  order: SortOrder!
}
enum VendorSortField {
  createdAt
  updatedAt
  companyName
  status
}
