

GraphQl Users Queries

#! Login
mutation {
  login(email: "sachin@gmail.com", password: "Abcd@1234") {
    token
    user {
      googleId
      name
      email
      phone
      role
    }
  }
}

# * Expected outcome login 
{
    "data": {
        "login": {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzk1MjYwOTcsIm5hbWUiOiJzYWNoaW4iLCJyb2xlIjoiQURNSU4iLCJ1c2VyX2lkIjoiNSJ9.Ezo9ywVzzq6NMhLAx8RqajanqteDEGFyuhIny4P-IgE",
            "user": {
                "googleId": "google-id-value",
                "name": "sachin",
                "email": "sachin@gmail.com",
                "phone": "1234567890",
                "role": "ADMIN"
            }
        }
    }
}

#! Create User
mutation CreateUser($input: CreateUserInput!) {
  createUser(input: $input) {
    googleId
    name
    email
    password
    phone
    role
  }
}
# *Variables for CreateUser
{
  "input": {
    "googleId": "GoogleID",
    "name": "Aarti",
    "password": "Aarti@1234",
    "email": "aarti@gmail.com",
    "phone": "1234567890",
    "role": "ADMIN"
  }
}
# * Expected Outcome  for CreateUser
{ 
    "data": {
        "createUser": {
            "googleId": "GoogleID",
            "name": "Aarti",
            "email": "aarti1234@gmail.com",
            "password": "$2a$10$NiHwP0nHKjg8sRgPUl9UoeluY8wkbrB/VR0tUPOFjIStBPtA1dkBe",
            "phone": "1234567890",
            "role": "ADMIN"
        }
    }
}
#! Update User  
mutation UpdateUser(
  $userID: ID!
  $input: UpdateUserInput!
) {
  updateUser(user_id: $userID, input: $input) {
    userID  
    name
    email
    phone
    password
    role
  }
}
#* Variables for Update User
{
  "userID": "17",
  "input": {
    "name": "New Name",
    "email": "new.123email@example.com",
    "phone": "1234567890",
    "role": "MANAGER"
  }
}
# * Expected Outcome  for Update User
{
    "data": {
        "updateUser": {
            "userID": "20",
            "name": "New Name",
            "email": "new.123email@example.com",
            "phone": "1234567890",
            "password": "$2a$10$ojaYa/H53JoFqRuI4dyz6u342j2vgtxUWzsqbsCssVvsg7AUnkcGi",
            "role": "MANAGER"
        }
    }
}


#! Delete User
mutation DeleteUser($id: ID!) {
  deleteUser(user_id: $id) {
    name
    email
    phone
    password
    role
  }
}
#* Variables for Delete User
{
  "id": "17"
}

#! Get All User
query GetUsers($filter: UserFilter, $pagination: PaginationInput, $sort: UserSortInput) {
  getUsers(filter: $filter, pagination: $pagination, sort: $sort) {
    items {
      userID
      name
      email
      role
      campaigns{
        campaignID
        campaignName
        campaignCountry
        industryTargeted
      }
    }
    totalCount
  }
}

#* Variables for Get All User
{
  "filter": {
    "name": null,
    "email": null,
    "role": null,
    "search": null
  },
  "pagination": {
    "page": 1,
    "pageSize": 2
  },
  "sort": {
    "field": "createdAt",
    "order": "ASC"
  }
}

#! Get Single User
query GetUser {
  getUser(userID: "20") {
    userID
    googleId
    name
    email
    phone
    role
    campaigns {
      campaignID
      campaignName
      campaignCountry
      campaignRegion
      industryTargeted
    }
  }
}

# if _, err := initializers.DB.DB(); err != nil {
# 		log.Fatalf("Database connection error: %v", err)
# 		return nil, err
# 	}

# 	var organization models.Organization

# 	// Fetch organization by ID
# 	if err := initializers.DB.First(&organization, "id = ?", id).Error; err != nil {
# 		log.Printf("Error fetching organization by ID: %v", err)
# 		return nil, fmt.Errorf("organization not found")
# 	}

# 	// Convert to GraphQL response type
# 	return &generated.Organization{
# 		OrganizationID:   fmt.Sprintf("%d", organization.ID),
# 		OrganizationName: organization.OrganizationName,
# 		Country:          organization.Country,
# 	}, nil


#! Leads Queries

# ! Get all Leads 
query GetAllLeads($filter: LeadFilter, $pagination: PaginationInput, $sort: LeadSortInput) {
  getAllLeads(filter: $filter, pagination: $pagination, sort: $sort) {
    items {
      leadID
      firstName
      lastName
      email
      phone
      country
      leadSource
      leadStage
      leadPriority
      linkedIn
      initialContactDate
      leadCreatedBy {
        userID
        name
      }
      leadAssignedTo {
        userID
        name
      }
      activities {
        activity_id
        activityType
        dateTime
        communicationChannel
        contentNotes
        participantDetails
        followUpActions
      }
      organization {
        ID
        organizationName
      }
      campaign {
        campaignID
        campaignName
        campaignCountry
        campaignRegion
        industryTargeted
      }
    }
    totalCount
  }
}
#* Variables for Get all Leads
{
  "filter": {
    "name": "John",
    "email": "john@example.com"
  },
  "pagination": {
    "page": 1,
    "pageSize": 10
  },
  "sort": {
    "field": "EMAIL",
    "order": "ASC"
  }
}
